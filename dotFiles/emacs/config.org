#+TITLE: Personal Config File for Emacs as an IDE
#+STARTUP: overview

* Setup Personal Information
This personal information might be used for some packages and programs in emacs.
#+begin_src emacs-lisp
(setq user-full-name "Ignacio Marmolejo"
      user-mail-address "ignacio.marmolejo@oracle.com"
      user-login-name "imarmole")
#+end_src
* Benchmark initialization
#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000)) ;; This helps reducing garbage collection during emacs-startup
(add-hook 'emacs-startup-hook (lambda ()
				(setq gc-cons-threshold 800000)
				(message "Emacs started in %s seconds with %d garbage collections"
					 (emacs-init-time "%.2f") gcs-done)))
#+end_src
* am5k custom functions
Define functions that does not require any third party package.
This are functions that I commonly use
** Smart beggining of line
#+begin_src emacs-lisp
(defun am5k/smart-beginning-of-line ()
  "Move point to first non-whitespace character or beginning-of-line.
Move point to the first non-whitespace character on this line.
If point was already at that position,move point to beginning of line."
  (interactive)
  (let ((oldpos (point)))
    (back-to-indentation) ;;Method bound to M-m
    (and (= oldpos (point))
	 (beginning-of-line))))

;; Re-bind C-a to use smart begginning of line
(global-set-key [home] 'am5k/smart-beginning-of-line)
(global-set-key (kbd "C-a") 'am5k/smart-beginning-of-line)

#+end_src
** Visit config file
#+begin_src emacs-lisp
(defun am5k/visit-config-file()
  "Opens main emacs configuration file"
  (interactive)
  (find-file am5k/emacs-config-file))

(defun am5k/visit-init-file()
  "Opens main emacs configuration file"
  (interactive)
  (find-file (expand-file-name "init.el" user-emacs-directory)))

(global-set-key (kbd "C-x c c") '("Visit Config file".  am5k/visit-config-file))
(global-set-key (kbd "C-x c i") '("Visit Init file" . am5k/visit-init-file))
#+end_src
** Basic Auth Function
This function is used mainly for RESTClient to provide the basic authentication string
to be used as a header
#+begin_src emacs-lisp
(defun am5k/basic-auth (username password)
  "This function takes two parameters, a username and a password to form
the authentication string used for Basic authorization"
  (message "am5k/basic-auth:: Received: username '%s' and password '%s'"
	   username password)
  (format "Basic %s"
	  (base64-encode-string (format "%s:%s" username password) t)))
#+end_src
** Switch Java
#+begin_src emacs-lisp
(defvar am5k/JAVA_BASE "/Library/Java/JavaVirtualMachines"
  "Base directory where to find installed JDKs.")

(defun am5k/list-java-versions ()
  "Return a list of installed JDKs in `am5k/JAVA_BASE' path."
  (seq-remove
   (lambda (a) (or (equal a ".") (equal a "..")))
   (directory-files am5k/JAVA_BASE)))

;;(am5k/list-java-versions)
#+end_src
** Proxy
#+begin_src emacs-lisp
(defun am5k/proxy-on()
  "Enables proxy settings inside emacs and for git"
  (interactive)
  ;;define proxy as local var, can't be used in url-proxy-services 
  (let ((proxy "http://www-proxy.us.oracle.com:80")) 
    (setq url-proxy-services
	  '(("no_proxy" . "^\\(localhost\\|10.*\\|*.oracle.com\\)")
	    ("http" . "http://www-proxy.us.oracle.com:80")
	    ("https" . "http://www-proxy.us.oracle.com:80")))
    (setenv "NO_PROXY" "^\\(localhost\\|10.*\\|*.oracle.com\\)")
    (dolist (envvar '("HTTP_PROXY" "HTTPS_PROXY" "FTP_PROXY" "ALL_PROXY"))
      (setenv envvar proxy)) ;; Set proxy environment variables
    (shell-command
     (concat "git config --global http.proxy " proxy))))

(defun am5k/proxy-off()
  "Disable proxy settings inside emacs and for git"
  (interactive)
  (setq url-proxy-services
     '(("no_proxy" . "")
       ("http" . "")
       ("https" . "")))
  (dolist (envvar '("NO_PROXY" "HTTP_PROXY" "HTTPS_PROXY" "FTP_PROXY" "ALL_PROXY"))
    (setenv envvar)) ;; Remove proxy values from above list of env keys
  (shell-command "git config --global --unset http.proxy"))
#+end_src
* Setup Package Manager
** Straight
*** Bootstraping
Bootstrap [[https://github.com/raxod502/straight.el][straight]] to it gets installed if if required. Straight requires git as dependency
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
*** Configure use-package
Package use-package is used to install and configure packages, straight can be integrated with use-package to handle installation
#+begin_src emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t
      use-package-verbose t)
	;; use-package-always-defer t))
#+end_src
** Define functions to help with the package installation (Not used anymore)
#+begin_src emacs-lisp
;;TODO make function that can use either package.el or straight.el to install packages
;; (defun am5k/install-packages-list ()
;;   "Install packages not yet installed."
;;   (interactive)
;;   (dolist (pkg am5k/packages-list)
;;     (straight-use-package pkg)))

;; (defun am5k/install-package (pkg)
;;   "Install a package 'PKG'."
;;   (interactive)
;;   (straight-use-package pkg))
#+end_src
** Install packages (Not used anymore)
#+begin_src emacs-lisp
;;(am5k/install-packages-list)
#+end_src
* Configure UI
The configuration below is to change anything related to how Emacs UI is rendered
** Fonts
#+begin_src emacs-lisp
(set-face-attribute 'default nil
		    :font "Fira Code"
		    :weight 'normal
		    :width 'normal
		    :height 140)
(set-face-attribute 'variable-pitch nil
		    :font "Fira Sans"
		    :height 150)
#+end_src
** Disable Tool bar and scrolls
#+begin_src emacs-lisp
(setq inhibit-startup-message t    ;; No startup buffer
      make-backup-files nil        ;; Do not create backup files
      confirm-kill-emacs 'y-or-n-p ;; Show message before killing
      use-short-ansers t)          ;; Use y/n instead of yes/no answers
;;(defalias 'yes-or-no-p 'y-or-n-p) ;; change promts default yes-no to y-n instead
;;(use-short-answers t) this is new in emacs 28, we can use instead of above alias
(scroll-bar-mode -1) ;; No scroll bar
(tool-bar-mode -1) ;; No tool bar
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(desktop-save-mode 0) ;; Restore last window confifuration, ie. tabs.
#+end_src
** Line numbers
#+begin_src emacs-lisp
(custom-set-variables
 '(display-line-numbers-type 'relative))
(global-display-line-numbers-mode 1)
#+end_src
** Settings for GUI mode
#+begin_src emacs-lisp
(when (display-graphic-p)
  (global-hl-line-mode 1))
#+end_src
** Settings for Terminal mode
#+begin_src emacs-lisp
  (when (not (display-graphic-p))
    (menu-bar-mode -1))
    ;; (when (package-installed-p doom-themes)
    ;;   (load-theme 'doom-nord t)))
  ;; (if (display-graphic-p)
  ;;     ;; When on graphical display
  ;;     (progn
  ;;       ;; Enable global highlight mode
  ;;       (global-hl-line-mode 1))
  ;;   ;; When on terminal
  ;;   (progn
  ;;     ;; Disable menu bar
  ;;     (menu-bar-mode -1)
  ;;     (load-theme 'doom-nord t)))
#+end_src
** Safe vars
#+begin_src emacs-lisp
(put 'dired-listing-switches' safe-local-variable #'stringp)
(put 'projectile-project-install-cmd 'safe-local-variable #'stringp)
(put 'projectile-project-compilation-cmd 'safe-local-variable #'stringp)
(put 'projectile-project-package-cmd 'safe-local-variable #'stringp)
(put 'projectile-project-run-cmd 'safe-local-variable #'stringp)
#+end_src
** Themes
*** Doom Themes
#+begin_src emacs-lisp
(use-package doom-themes
  :config (load-theme 'doom-one t))
#+end_src
*** Change theme accordingly to system theme (light/dark)
#+begin_src emacs-lisp
;; (defvar am5k/theme-light 'doom-zenburn)
;; (defvar am5k/theme-dark 'doom-zenburn)

;; (defun am5k/apply-system-theme(appearance)
;;   "Apply a light or dark theme depending on the APPEARANCE of the system."
;;   (mapc #'disable-theme custom-enabled-themes)
;;   (pcase appearance
;;     ('light (load-theme am5k/theme-light t))
;;     ('dark (load-theme am5k/theme-dark t))))

;; (add-hook 'ns-system-appearance-change-functions #'am5k/apply-system-theme)
#+end_src
** Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :custom
  (doom-modeline-buffer-file-name-style 'file-name)
  :config
  (doom-modeline-mode 1)
  (set-face-attribute 'mode-line nil :family "FiraCode Nerd Font" :height 130)
  (set-face-attribute 'mode-line-inactive nil :family "FiraCode Nerd Font" :height 130))
;; (require 'doom-modeline)
;; (doom-modeline-mode 1)
;; (eval-after-load 'doom-modeline
;;   '(progn
;;      (custom-set-variables
;;       '(doom-modeline-buffer-file-name-style 'file-name))))
#+end_src
* Org-Mode
** Configure org-mode
#+begin_src emacs-lisp
(use-package org
  :straight (:type built-in)
  ;; :mode "\\.org\\'"
  ;; :commands org-mode
  :config (define-key org-mode-map (kbd "C-c C-r") verb-command-map)
  :custom
  (org-edit-src-content-indentation 0)
  (org-ellipsis " ↘")
  (org-export-backends '(ascii html odt md))
  (org-confirm-babel-evaluate
	(lambda (lang body)
	  (and (not (string= lang "emacs-lisp"))
	       (not (string= lang "elisp"))
	       (not (string= lang "restclient"))
	       (not (string= lang "python"))))))

;; (eval-after-load 'org
;;   '(progn
;;      (custom-set-variables
;;       '(org-edit-src-content-indentation 0)
;;       '(org-ellipsis " ↘"))))
#+end_src
* Packages Configuration
** Evil
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :custom
  (evil-undo-system 'undo-redo)
  :config
  (evil-set-leader 'normal (kbd "SPC"))
  (evil-define-key 'normal 'global (kbd "<leader>fs") 'save-buffer)
  (evil-define-key 'normal 'global (kbd "<leader>ff") 'find-file)
  (evil-define-key 'normal 'global (kbd "<leader>ht") 'consult-theme)
  (evil-mode 1))
#+end_src
*** Evil Collection
This is a collection of Evil bindings for the parts of Emacs that Evil does not cover properly by default, such as help-mode, M-x calendar, Eshell and more.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src
*** Evil Commentary
#+begin_src emacs-lisp
(use-package evil-commentary
  :after evil
  :config
  (evil-commentary-mode))
#+end_src
** Ansi-Color
#+begin_src emacs-lisp
  ;;;; colorize output in compile buffer
(defun am5k/colorize-compilation-buffer ()
  "Colorize compilation buffers."
  (ansi-color-apply-on-region compilation-filter-start (point)))

(add-hook 'compilation-filter-hook 'am5k/colorize-compilation-buffer)
#+end_src
** Which-Key
#+begin_src emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :init
  (which-key-mode 1))
;; (require 'which-key)
;; (which-key-mode 1)
#+end_src
** Compat
Provides Elisp forwards compatibility library.
#+begin_src emacs-lisp
(use-package compat)
#+end_src
** Orderless
#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless partial-completion basic)))
#+end_src
** Vertico
#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode 1)
  :config
  (setq vertico-cycle t)
  ;;; History mode
  (savehist-mode t)
  (save-place-mode 1)
  (recentf-mode 1))
#+end_src
*** Vertico Directory
Vertico extension to apply on top of directory for more covenient navigation commands.
This come already as part of vertico package, but it is not loaded, so we need to manually load the extensions ourself
#+begin_src emacs-lisp
(use-package vertico-directory
  :straight nil
  :load-path "straight/build/vertico/extensions/"
  :after vertico
  ;; this adds -hook explicitly so we need to remove the -hook portion
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)
  :bind (:map vertico-map
	      ("\r" . vertico-directory-enter)
	      ("\d" . vertico-directory-delete-char)
	      ("\M-\d" . vertico-directory-delete-word)))
  
;; (eval-after-load 'vertico
;;   '(progn
;;      (add-to-list 'load-path (expand-file-name "straight/build/vertico/extensions" user-emacs-directory))
;;      (require 'vertico-directory)
;;      ;;TODO bind key map
;;      (define-key vertico-map "\r" #'vertico-directory-enter)
;;      (define-key vertico-map "\d" #'vertico-directory-delete-char)
;;      (define-key vertico-map "\M-\d" #'vertico-directory-delete-word)
     ;; (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)))
#+end_src
** Corfu
Corfu enhances completion at point with a small completion popup.
The current candidates are shown in a popup below or above the point.
Corfu is the minimalistic completion-in-region counterpart of the Vertico minibuffer UI.
https://github.com/minad/corfu
#+begin_src emacs-lisp
(use-package corfu
  :custom
  (corfu-separator ?\s) ;; Orderless field separator               
  (corfu-cycle t)	;; Enable cycling for `corfu-next/previous'  
  :init
  (global-corfu-mode))

;;   (defun corfu-enable-always-in-minibuffer ()
;;   "Enable Corfu in the minibuffer if Vertico/Mct are not active."
;;   (unless (or (bound-and-true-p mct--active)
;;               (bound-and-true-p vertico--input))
;;     ;; (setq-local corfu-auto nil) Enable/disable auto completion
;;     (corfu-mode 1)))  
;; (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
  
;; (eval-after-load 'corfu
;;   '(progn
;;      (corfu-global-mode 1)
;;      (custom-set-variables
;;       ;; '(corfu-auto t)           ;; Allow completions to show automatically (Otherwise require M-tab)
;;       '(corfu-separator ?\s)     ;; Orderless field separator
;;       '(corfu-cycle t))))        ;; Enable cycling for `corfu-next/previous'
#+end_src
** Dabbrev
Emacs abbrevation
#+begin_src emacs-lisp
;; Use dabbrev with Corfu!
(use-package dabbrev
  :straight (:type built-in)
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand)))
#+end_src
** Cape
Cape provides a bunch of Completion At Point Extensions which can be used in combination with my Corfu completion UI or the default completion UI.
The completion backends used by completion-at-point are so called completion-at-point-functions (Capfs)
https://github.com/minad/cape
#+begin_src emacs-lisp
(use-package cape
  :after corfu
  :init
  (cl-pushnew #'cape-dabbrev completion-at-point-functions)
  (cl-pushnew #'cape-file completion-at-point-functions)
  (cl-pushnew #'cape-elisp-block completion-at-point-functions)
  (cl-pushnew #'cape-keyword completion-at-point-functions)
  (cl-pushnew #'cape-symbol completion-at-point-functions)
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p i" . cape-ispell)))
#+end_src
** Tempel
Create and manage templates. Alternative to yasnippet
https://github.com/minad/tempel
We define a funcntion that will be hook for major modes where we want completion at point
to trigger Temple templates
#+begin_src emacs-lisp
;; Setup completion at point
(defun am5k/tempel-setup-capf ()
  ;; Add the Tempel Capf to `completion-at-point-functions'. `tempel-expand'
  ;; only triggers on exact matches. Alternatively use `tempel-complete' if
  ;; you want to see all matches, but then Tempel will probably trigger too
  ;; often when you don't expect it.
  ;; NOTE: We add `tempel-expand' *before* the main programming mode Capf,
  ;; such that it will be tried first.
  (setq-local completion-at-point-functions
              (cons #'tempel-expand
                    completion-at-point-functions)))

 ;; (add-hook 'prog-mode-hook 'am5k/tempel-setup-capf) 
 ;; (add-hook 'text-mode-hook 'am5k/tempel-setup-capf)

(use-package tempel
  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert))
  :hook
  (prog-mode-hook . am5k/tempel-setup-capf)
  (text-mode-hook . am5k/tempel-setup-capf))

(use-package tempel-collection
  :after tempel)
#+end_src
** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :disabled)
#+end_src
** Company (Disabled)
Substitued by corfu, a more minimalistic version which requires other packages like Cape to be more an alternative to company
#+begin_src emacs-lisp
;; (use-package company)
;; (add-hook 'after-init-hook 'globlal-company-mode)
#+end_src
** Marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :after vertico
  :config
  (marginalia-mode 1))

;; (eval-after-load 'vertico
;;   '(marginalia-mode 1))
#+end_src
** Consult
#+begin_src emacs-lisp
(use-package consult)
(eval-after-load 'consult
  '(progn
     (consult-customize
      consult-theme :preview-key '(:debounce 0.5 any)
      consult-buffer :preview-key '(:debounce 0.3 any))
     (global-set-key (kbd "C-x b") 'consult-buffer)
     (global-set-key (kbd "s-T") 'consult-theme)
     (global-set-key (kbd "C-c <SPC> t") '("Change Theme" . consult-theme))
     (define-key org-mode-map (kbd "C-c C-.") 'consult-org-heading)
     (define-key search-map (kbd "r") 'consult-ripgrep)
     (define-key search-map (kbd "l") 'consult-line)
     (define-key search-map (kbd "L") 'consult-line-multi)
     (define-key search-map (kbd "m") 'consult-multi-occur)))
#+end_src
** Vterm
#+begin_src emacs-lisp
;; (use-package vterm
;;   :ensure t)
#+end_src
** Project (Emacs version)
#+begin_src emacs-lisp
(use-package tab-bar
  :straight (:type built-in)
  :init (tab-bar-mode 1)
  :custom
  (tab-bar-tab-hints t)
  (tab-bar-new-tab-choice "*scratch*")
  (tab-bar-new-tab-to "rightmost")
  (tab-bar-select-tab-modifiers '(super)))
#+end_src
** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :disabled)
#+end_src
** Magit
Git in Emacs
#+begin_src emacs-lisp
(use-package magit
  :commands magit-status)
#+end_src
** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Multiple Cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind
  ("C-S-c C-S-c" . mc/edit-lines))
#+end_src
** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :bind
  ("C-h f" . helpful-callable)
  ("C-h v" . helpful-variable)
  ("C-h k" . helpful-key)
  ("C-h o" . helpful-symbol))
#+end_src
** ns-auto-titlebar
#+begin_src emacs-lisp
(use-package ns-auto-titlebar
  :if (eq system-type 'darwin)
  :config
  (ns-auto-titlebar-mode))
#+end_src
** Verb (REST Client minor mode for Org)
#+begin_src elisp
(use-package verb)
#+end_src
* Programming Languages & Tools
** Customize Major Modes
*** Prog-mode
#+begin_src emacs-lisp
(defvar am5k/tab-width 2 "Personal custom value for indentation.")

(defun am5k/prog-mode-hook ()
"Enables some functionality for programming modes."
  (flymake-mode 1)
  (display-line-numbers-mode 1))

(add-hook 'prog-mode-hook 'am5k/prog-mode-hook)

;; (defun am5k/js-hook ()
;;   (setq js-indent-level am5k/tab-width))

;; (eval-after-load 'prog-mode
;; 		 '(add-hook 'prog-mode-hook 'am5k/prog-mode-hook))

;; (eval-after-load 'js
;;   '(progn
;;      (define-key js-mode-map "\C-c\C-f" #'json-pretty-print-buffer)
;;      (add-to-list 'auto-mode-alist '("\\.json5\\'" . js-mode))
;;      (add-hook 'js-mode-hook 'am5k/js-hook)))

#+end_src
*** Java
#+begin_src emacs-lisp
(use-package java-mode ;;Does not exist but used for configuration only by setting :ensure/:straight nil
  :straight nil
  :disabled
  :hook am5k/java-hook
  :init
  :custom
  (c-basic-offset am5k/tab-width)
  (tab-width am5k/tab-width)
  (indent-tabs-mode t))

(defun am5k/java-hook ()
  (setq c-basic-offset am5k/tab-width
	tab-width am5k/tab-width
	indent-tabs-mode t))

(add-hook 'java-mode-hook 'am5k/java-hook)

#+end_src
**** JDecomp
Java Decompiler
#+begin_src emacs-lisp
(use-package jdecomp
  :mode ("\\.class\\'" . jdecomp-mode)
  :custom
  (jdecomp-decompiler-type 'cfr)
  (jdecomp-decompiler-paths
   '((cfr . "~/Software/cfr-0.152.jar")
     (fernflower . "~/Software/fernflower-decompiler.jar")
     (procyon . "~/Software/procyon-decompiler-0.5.36.jar"))))
#+end_src
*** JavaScript
#+begin_src emacs-lisp
(use-package js
  :mode ("\\.json[5]\\'" . js-mode)
  :commands js-mode
  :bind
  (:map js-mode-map
	("C-c C-f" . json-pretty-print-buffer))
  :custom
  (js-indent-level am5k/tab-width))
#+end_src
*** Rust
#+begin_src emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'")
#+end_src
*** Python
#+begin_src emacs-lisp
(use-package python
  :mode "\\.py\\'"
  :custom
  (python-indent-offset am5k/tab-width)
  (python-indent-guess-indent-offset nil)
  (python-indent-guess-indent-offset-verbose nil))
#+end_src
*** Nix
#+begin_src elisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src
** RestClient
#+begin_src emacs-lisp
(use-package restclient
  :mode ("\\.http\\'" . restclient-mode))

(use-package ob-restclient
  :requires (org restclient))
#+end_src
** PlantUML
#+begin_src emacs-lisp
(use-package plantuml-mode
  :mode "\\.plantuml\\'"
  :custom
  (plantuml-default-exec-mode 'jar)
  (plantuml-jar-path "/usr/local/Cellar/plantuml/1.2022.8/libexec/plantuml.jar")
  (org-plantuml-jar-path "/usr/local/Cellar/plantuml/1.2022.8/libexec/plantuml.jar")
  (plantuml-output-type "png")
  (plantuml-indent-level am5k/tab-width))
#+end_src
** Eglot (Emacs LSP)
#+begin_src emacs-lisp
(use-package eglot
  :bind (:map eglot-mode-map
              ("C-c <tab>" . completion-at-point)
              ("C-c e f n" . flymake-goto-next-error)
              ("C-c e f p" . flymake-goto-prev-error)
              ("C-c e r" . eglot-rename)
              ("C-c e f r" . eglot-format)
              ("C-c e f b" . eglot-format-buffer)
              ("C-c e a" . eglot-code-actions))
  :config
  (setcdr (assq 'java-mode eglot-server-programs)
          `("/Users/imarmole/Software/lsp-servers/Java/jdtls-1.9.0/bin/jdtls" "-data" "/Users/imarmole/.cache/emacs/workspace/"
            "--jvm-arg=-XX:+UseG1GC"
            "--jvm-arg=-XX:+UseStringDeduplication"
            "-Djava.format.settings.url=file:///Users/imarmole/code-format.xml"
            "-Djava.format.settings.profile=myown"))
  :commands eglot)
#+end_src
** LSP
*** lsp configuration
#+begin_src emacs-lisp
(defvar am5k/lsp-home (concat (getenv "HOME") "/Software/lsp-servers/")
  "The directory where lsp server is installed.")
(defvar am5k/jvm-home "/Library/Java/JavaVirtualMachines/")

;; (defun am5k/configure-lsp()
;;   "Configuration for 'lsp-mode'."
;;   ;; Use Corfu to handle completion-at-point for LSP
;;   (custom-set-variables '(lsp-completion-provider :none)) ;; We override this with corfu
;;   (defun amk5/lsp-mode-setup-completion() ;; Pass this function as a hook
;;     (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
;;           '(orderless)))
;;   (add-hook 'lsp-completion-mode 'amk5k/lsp-mode-setup-completion)
;;   (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))

;; (defun am5k/configure-lsp-java ()
;;   "Configuration for 'lsp-java'."
;;   (custom-set-variables
;;    '(lsp-java-format-settings-url "https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml")
;;    '(lsp-java-server-install-dir (concat (getenv "HOME") "/Software/lsp-servers/Java/jdtls-1.9.0/"))
;;    '(lsp-java-configuration-runtimes ;;TODO make a function to get the installed versions instead of harcoding
;;      '[(:name "JavaSE-1.8"
;; 	      :path "/Library/Java/JavaVirtualMachines/jdk1.8.0_311.jdk/Contents/Home"
;; 	      :default t)
;;        (:name "JavaSE-11"
;; 	      :path "/Library/Java/JavaVirtualMachines/jdk-11.0.12.jdk/Contents/Home")
;;        (:name "JavaSE-17"
;; 	      :path "/Library/Java/JavaVirtualMachines/jdk-17.0.4.1.jdk/Contents/Home")]))
;;   (add-hook 'java-mode-hook #'lsp))

;; (defun am5k/configure-dap-mode ()
;;   "Configure 'dap-mode'."
;;   ;; Reserverd for any required
;;   )
#+end_src
*** lsp-mode
#+begin_src emacs-lisp
;;(setq lsp-keymap-prefix "C-c l")
(use-package lsp-mode
  :init
  :disabled 
  (setq lsp-keymap-prefix "C-c l")
  :hook (lsp-mode . lsp-enable-which-key-integration)
  :custom
  (lsp-completion-provider :none)
  (lsp-enable-snippet nil))

;; (eval-after-load 'lsp-mode
;;   '(progn
;;      (am5k/configure-lsp)
;;      (use-package lsp-java)
;;      (am5k/configure-lsp-java)
;;      (use-package dap-mode)))

;; (eval-after-load 'dap-mode
;;   '(custom-set-variables
;;     '(dap-java-test-runner (concat am5k/lsp-home "/Java/jdtls/test-runner/junit-platform-console-standalone.jar"))))
#+end_src
*** lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :after lsp-mode
  :commands
  (lsp-ui-mode))
#+end_src
*** dap-mode
#+begin_src emacs-lisp
(use-package dap-mode
  :after lsp-mode
  :disabled
  :bind
  (:map dap-mode-map
	("C-c l j t" . dap-java-run-test-class)
	("C-c l j T" . dap-java-debug-test-class)
	("C-c l j m" . dap-java-run-test-method)
	("C-c l j M" . dap-java-debug-test-method)
	("C-c l j d" . dap-java-debug))
  :commands
  (dap-debug)
  :custom
  (dap-java-test-runner (concat am5k/lsp-home "/Java/jdtls/test-runner/junit-platform-console-standalone.jar"))
  ;;TODO find a way to pass this configuration when running `dap-java-run-test-method' and similar methods
  (dap-register-debug-template
      "jMockit Runner"
      (list :name "jMockit Runner"
            :type "java"
            :request "compile_attach"
            :args "-javaagent:%HOME/.m2/repository/org/jmockit/jmockit/1.41/jmockit-1.41.jar"
            :host "localhost"
            :request "launch"
            :vmArgs "-javaagent:%HOME/.m2/repository/org/jmockit/jmockit/1.41/jmockit-1.41.jar"
            :modulePaths []
            :classPaths nil
            :projectName nil
            :mainClass nil))
  :config
  (dap-auto-configure-mode))
#+end_src
*** lsp-java
#+begin_src emacs-lisp
(use-package lsp-java
  :hook (java-mode . lsp)
  :disabled
  :config
  (setq lsp-java-format-settings-url "https://github.com/google/styleguide/blob/gh-pages/eclipse-java-google-style.xml"
	lsp-java-server-install-dir (concat (getenv "HOME") "/Software/lsp-servers/Java/jdtls-1.9.0/")
	lsp-java-workspace-cache-dir (concat (getenv "HOME") "/.cache/jdtls/workspace")
	lsp-java-configuration-runtimes '[(:name "JavaSE-1.8"
                                           :path "/Library/Java/JavaVirtualMachines/jdk1.8.0_311.jdk/Contents/Home"
                                           :default t)
                                          (:name "JavaSE-11"
                                           :path "/Library/Java/JavaVirtualMachines/jdk-11.0.12.jdk/Contents/Home")
					  (:name "JavaSE-17"
					   :path "/Library/Java/JavaVirtualMachines/jdk-17.0.4.1.jdk/Contents/Home")]))

#+end_src
* Org-Babel
Configure languages for org-babel after we have loaded additional language support in our configuration
** Additional languages
*** Load languages
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (restclient . t)
     (python . t)
     (js . t))))
#+end_src
*** Config
#+begin_src emacs-lisp
;;;; Reference: https://orgmode.org/manual/Code-Evaluation-Security.html
;; (setq org-confirm-babel-evaluate nil)
;;;: Or use a function instead
;; (defun am5k/org-confirm-babel-evaluate (lang body)
;;   (and (not (string= lang "emacs-lisp"))
;;        (not (string= lang "elisp"))
;;        (not (string= lang "restclient"))
;;        (not (string= lang "python"))))

;; (setq org-confirm-babel-evaluate #'am5k/org-confirm-babel-evaluate)
#+end_src
